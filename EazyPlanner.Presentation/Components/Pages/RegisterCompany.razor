@page "/registercompany"
@using EazyPlanner.Domain.Entities
@inject ILogger<CustomerSupplier> Logger
<h3>Register Company</h3>

@if (customerSupplier is null)
{
    <p> <em>Loading...</em> </p>
}
else
{
    <EditForm Enhance="true" method="post" Model="@customerSupplier" OnValidSubmit="@HandlerSubmit" FormName="customerSupplier" class="form-floating">
        <DataAnnotationsValidator />
        <div class="row g-2 mb-3">
            <div class="col-md-2">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.CNPJ" id="cnpj" placeholder="00.000.000/0000-00" class="form-control"></InputText>
                    <label for="cnpj">CNPJ</label>
                    <ValidationMessage For="@(() => customerSupplier.CNPJ )" />
                </div>
            </div>
            <div class="col-md-5">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.CompanyName" id="companyName" placeholder="Company name" class="form-control"></InputText>
                    <label for="companyName">Company Name</label>
                    <ValidationMessage For="@(() => customerSupplier.CompanyName )" />
                </div>
            </div>
            <div class="col-md-5">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.CompanyFantasy" id="companyFantasy" placeholder="Company fantasy" class="form-control"></InputText>
                    <label for="companyFantasy">Company Fantasy</label>
                    <ValidationMessage For="@(() => customerSupplier.CompanyFantasy )" />
                </div>
            </div>
        </div>

        <div class="row g-2 mb-3">
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.ProvinceId" id="provinceId" placeholder="00000000000" class="form-control"></InputText>
                    <label for="provinceId">Province ID</label>
                    <ValidationMessage For="@(() => customerSupplier.ProvinceId )" />

                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.CityId" id="cityId" placeholder="00000000000" class="form-control"></InputText>
                    <label for="cityId">City ID</label>
                    <ValidationMessage For="@(() => customerSupplier.CityId )" />
                </div>
            </div>
        </div>

        <div class="row g-2 mb-3">
            <div class="col-md-2">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier!.Address!.ZipCode" id="zipCode" placeholder="00.000-000" class="form-control"></InputText>
                    <label for="zipCode">Zip Code</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.ZipCode )" />
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.StreetName" id="streetName" placeholder="Street name" class="form-control"></InputText>
                    <label for="streetName">Street name</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.StreetName )" />
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.BuildingNumber" id="buildingNumber" placeholder="0000" class="form-control"></InputText>
                    <label for="buildingNumber">Building number</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.BuildingNumber )" />
                </div>
            </div>
        </div>

        <div class="row g-2 mb-3">
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.SecondaryAddress" id="secondaryAddress" placeholder="SecondaryAddress" class="form-control"></InputText>
                    <label for="secondaryAddress">Secondary address</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.SecondaryAddress )" />
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.City" id="city" placeholder="City" class="form-control"></InputText>
                    <label for="city">City</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.City )" />
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.State" id="state" placeholder="State" class="form-control"></InputText>
                    <label for="state">State</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.State )" />
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <InputText @bind-Value="customerSupplier.Address.Country" id="country" placeholder="Country" class="form-control"></InputText>
                    <label for="country">Country</label>
                    <ValidationMessage For="@(() => customerSupplier.Address.Country )" />
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-outline-success">Save</button>
    </EditForm>
}
@code {
    [SupplyParameterFromForm(FormName = "customerSupplier")]
    public CustomerSupplier? customerSupplier { get; set; }


    private async void HandlerSubmit(EditContext editContext)
    {
        Logger.LogInformation("CNPJ {cnpj}", customerSupplier?.CNPJ);
        // var newCustomerSupplier = (CustomerSupplier)editContext.Model;
        // newCustomerSupplier.CNPJ = customerSupplier.CNPJ;
        customerSupplier!.Create!.CreateAt = DateTime.Now;
        customerSupplier.Create.CreatedBy = "Emerson Martins Brito";
        await customerSupplierRepository.AddCustomerSupplier(customerSupplier!);
        navigation.NavigateTo("/");
    }

    protected override void OnInitialized()
    {
        customerSupplier ??= new CustomerSupplier(0, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
        customerSupplier.Address ??= new AddressBase(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
        customerSupplier.Create ??= new CreateBase(string.Empty, DateTime.Now, string.Empty, DateTime.Now);
        customerSupplier.Contact ??= new ContactBase(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
    }
}
